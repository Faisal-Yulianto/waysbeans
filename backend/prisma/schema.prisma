// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  fullname String
  password String
  role     Role     @default(USER)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  profile  Profile?
  products Product[]
  carts    Cart[]

  Transaction Transaction[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Product {
  id          Int          @id @default(autoincrement())
  image       String
  productName String
  productDesc String
  price       Float
  qty         Int
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  cartItems   CartItem[]
  OrderItems  OrderItems[]

  @@map("tb_product")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("tb_cart")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tb_cart_item")
}

model OrderItems {
  id            Int         @id @default(autoincrement())
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  prductionId   Int
  product       Product     @relation(fields: [prductionId], references: [id])
  quantity      Int
  price         Int
  subtotal      Int
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt

  @@map("tb_oder_itmes")
}

model Transaction {
  id          Int               @id @default(autoincrement())
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  orderItems  OrderItems[]
  totalAmount Float
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  address      String
  name         String
  phone        String
  posscode     String
  imagepayment String

  @@map("tb_transaction")
}

enum Role {
  USER
  ADMIN
}
  enum TransactionStatus {
    PENDING
    COMPLETED
    CANCELED
  }
